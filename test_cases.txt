Here are the test cases to validate various aspects of the provided Jupyter Notebook code:

### Test Case 1: Data Import Validation
- **Description**: Validates that the training and testing datasets are correctly imported and contain the expected number of rows and columns.
- **How to Perform**:
    ```python
    import pandas as pd

    # Load the datasets
    df_train = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/Loan_Data/loan_train.csv', usecols=[i for i in range(1, 14)])
    df_test = pd.read_csv('https://raw.githubusercontent.com/dphi-official/Datasets/master/Loan_Data/loan_test.csv')

    # Validate dimensions
    assert df_train.shape == (X, Y), "Training set shape is incorrect"
    assert df_test.shape == (M, N), "Testing set shape is incorrect"
    ```

### Test Case 2: Missing Values Handling
- **Description**: Validates that missing values in the 'Dependents' and 'Self_Employed' columns of both datasets are correctly filled.
- **How to Perform**:
    ```python
    # Check for missing values
    assert df_train['Dependents'].isna().sum() == 0, "Missing values in Dependents not handled in training set"
    assert df_train['Self_Employed'].isna().sum() == 0, "Missing values in Self_Employed not handled in training set"
    assert df_test['Dependents'].isna().sum() == 0, "Missing values in Dependents not handled in testing set"
    assert df_test['Self_Employed'].isna().sum() == 0, "Missing values in Self_Employed not handled in testing set"
    ```

### Test Case 3: Data Type Validation
- **Description**: Validates that the column types are changed correctly after preprocessing.
- **How to Perform**:
    ```python
    assert df_train['Credit_History'].dtype == 'object', "Credit_History type not converted correctly"
    assert df_train['Loan_Status'].dtype == 'int', "Loan_Status type not converted correctly"
    ```

### Test Case 4: Data Visualization
- **Description**: Validates that the data visualization code runs without errors and produces the expected types of plots.
- **How to Perform**:
    ```python
    import matplotlib.pyplot as plt

    # Execute visualization code
    plt.figure(figsize=(6.4, 4.8))
    plt.pie(df_viz_1['Total'], labels=df_viz_1['Loan_Status'], autopct='%1.1f%%')
    plt.title('Number of customers by loan status')
    plt.axis('equal')
    plt.show()  # Ensure this doesn't raise an error
    ```

### Test Case 5: Model Training Validation
- **Description**: Validates that the models are trained without errors and the training process runs through.
- **How to Perform**:
    ```python
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LogisticRegression

    # Split the data
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Train a sample model
    model = LogisticRegression()
    model.fit(X_train, y_train)
    
    assert hasattr(model, 'coef_'), "Model training failed, no coefficients found"
    ```

### Test Case 6: Prediction Validation
- **Description**: Validates that the model can make predictions and that the output is of the expected shape.
- **How to Perform**:
    ```python
    y_pred = model.predict(X_val)
    assert y_pred.shape == y_val.shape, "Predicted output shape does not match validation labels shape"
    ```

### Test Case 7: Model Evaluation Validation
- **Description**: Validates that evaluation metrics (like F1 score) are calculated and return expected numerical values.
- **How to Perform**:
    ```python
    from sklearn.metrics import f1_score

    f1 = f1_score(y_val, y_pred)
    assert isinstance(f1, float) and 0 <= f1 <= 1, "F1 Score is not calculated correctly"
    ```

### Test Case 8: Confusion Matrix Validation
- **Description**: Validates that the confusion matrix is generated without errors and contains non-negative integers.
- **How to Perform**:
    ```python
    from sklearn.metrics import confusion_matrix

    cm = confusion_matrix(y_val, y_pred)
    assert cm.shape == (2, 2), "Confusion matrix shape is incorrect"
    assert (cm >= 0).all(), "Confusion matrix contains negative values"
    ```

These test cases help ensure the functionality and correctness of each critical component in the data processing, model training, and evaluation steps of the Jupyter Notebook.